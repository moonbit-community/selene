// Generated using `moon info`, DON'T EDIT IT
package "Milky2018/selene/collision"

import(
  "Milky2018/selene/entity"
  "Milky2018/selene/inputs"
  "Milky2018/selene/math"
  "Milky2018/selene/velocity"
  "moonbitlang/core/set"
)

// Values
fn area_collide_system(Double) -> Unit

let areas : Map[@entity.Entity, Area]

let colliders : Map[@entity.Entity, Collider]

let collision_layers : Map[@entity.Entity, CollisionLayer]

fn debug_collide_system(Double) -> Unit

fn get_collision_infos(@entity.Entity) -> Array[CollisionInfo]

fn get_contains(@entity.Entity) -> @set.Set[@entity.Entity]

fn is_on_floor(@entity.Entity) -> Bool

fn move_system(Double) -> Unit

fn pickable_click_system(Double) -> Unit

let pickables : Map[@entity.Entity, Pickable]

fn quadtree_clear_system(Double) -> Unit

fn quadtree_render_system(Double) -> Unit

let real_velocities : Map[@entity.Entity, @velocity.Velocity]

let shapes : Map[@entity.Entity, CollisionShape]

// Errors

// Types and methods
type Area
fn Area::new(CollisionMask) -> Self
fn Area::on_enter(Self, (@entity.Entity) -> Unit) -> Unit
fn Area::on_exit(Self, (@entity.Entity) -> Unit) -> Unit

pub(all) struct Collider {
  mut active : Bool
  mask : CollisionMask
}
fn Collider::new(CollisionMask) -> Self

pub struct CollisionInfo {
  entity : @entity.Entity
  direction : @math.Vec2D
}

pub struct CollisionLayer(UInt)
fn CollisionLayer::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn CollisionLayer::inner(Self) -> UInt
fn CollisionLayer::new() -> Self
#deprecated
fn CollisionLayer::op_equal(Self, Self) -> Bool // from trait `Eq`
impl Eq for CollisionLayer

pub struct CollisionMask(Array[CollisionLayer])
fn CollisionMask::empty() -> Self
#deprecated
fn CollisionMask::inner(Self) -> Array[CollisionLayer]
fn CollisionMask::new(Array[CollisionLayer]) -> Self

pub(all) enum CollisionShape {
  Rect(size~ : @math.Vec2D, offset~ : @math.Vec2D)
}

type Pickable
fn Pickable::new() -> Self
fn Pickable::on_just_pressed(Self, (@inputs.MouseButton) -> Unit) -> Unit
fn Pickable::on_just_released(Self, (@inputs.MouseButton) -> Unit) -> Unit
fn Pickable::on_pressed(Self, (@inputs.MouseButton) -> Unit) -> Unit
fn Pickable::on_released(Self, (@inputs.MouseButton) -> Unit) -> Unit

// Type aliases

// Traits

