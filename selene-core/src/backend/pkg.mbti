// Copyright 2025 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package "Milky2018/selene/backend"

import(
  "Milky2018/selene/inputs"
  "Milky2018/selene/math"
)

fn initialize(
  startup~ : () -> Unit,
  render_loop~ : (Double) -> Unit,
  game_loop~ : (Double) -> Unit, 
  canvas_width~ : Double, 
  canvas_height~ : Double,
  fps~ : UInt,
  image_smooth~ : Bool,
  zoom~ : Double
) -> () -> Unit

fn draw_picture(
  png~ : String,
  x~ : Double,
  y~ : Double,
  width~ : Double,
  height~ : Double,
  transform~ : @math.Transform,
  repeat~ : @math.RepeatMode
) -> Unit

fn draw_sprite(
  sprite_path~ : String,
  x~ : Double,
  y~ : Double,
  offset_x~ : Double,
  offset_y~ : Double,
  width~ : Double,
  height~ : Double,
  transform~ : @math.Transform
) -> Unit

fn register_key_events(Set[@inputs.Code]) -> Unit

fn register_mouse_events(@inputs.Mouse, @inputs.MouseMovement) -> Unit

fn lock_mouse(Ref[Bool]) -> Unit

fn draw_stroke_rect(
  x~ : Double,
  y~ : Double,
  width~ : Double,
  height~ : Double,
  color~ : String
) -> Unit

fn draw_text(
  text~ : String,
  x~ : Double,
  y~ : Double,
  font~ : String,
  color~ : String,
  align~ : @math.HAlign,
  baseline~ : @math.VAlign
) -> Unit

fn draw_color_rect(
  x~ : Double,
  y~ : Double,
  width~ : Double,
  height~ : Double,
  color~ : String
) -> Unit

fn draw_gradient_rect(
  x~ : Double,
  y~ : Double,
  width~ : Double,
  height~ : Double,
  color_start~ : String,
  color_end~ : String
) -> Unit

fn play_audio(audio_path~ : String, volume~ : Double, loop_~ : Bool) -> Unit

fn get_canvas_size() -> @math.Vec2D

fn get_zoom() -> Double

fn get_realtime_delta() -> Double

fn preload_img(String) -> Unit

fn preload_audio(String) -> Unit

fn set_time_scale(Double) -> Unit

fn get_time_scale() -> Double

fn load_font(String, String) -> Unit
