// Copyright 2025 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///|
const ZOOM : Double = 2.0

///|
const VIEWPORT_WIDTH : Double = 480.0

///|
const VIEWPORT_HEIGHT : Double = 320.0

///|
const REAL_VIEWPORT_WIDTH : Double = VIEWPORT_WIDTH * ZOOM

///|
const REAL_VIEWPORT_HEIGHT : Double = VIEWPORT_HEIGHT * ZOOM

///|
const MAP_HEIGHT : Double = 640.0

///|
const MAP_WIDTH : Double = 640.0

///|
const FPS : Double = 60

///|
fn main {
  @system.App::new()
  .with_canvas_width(REAL_VIEWPORT_WIDTH)
  .with_canvas_height(REAL_VIEWPORT_HEIGHT)
  .with_image_smooth(false)
  .with_zoom(ZOOM)
  .with_fps(FPS.to_uint())
  .add_plugin(@plugins.default_plugin)
  // .add_plugin(@plugins.debug_plugin)
  .add_system(game_start, schedule=Startup)
  .add_system(spawn_enemy_system, schedule=Startup)
  .add_system(player_update_system)
  .add_system(player_shooting_system)
  .add_system(enemy_ai_system)
  .add_system(devil_shooting_system)
  .add_system(check_victory_system)
  .add_system(game_timer_system)
  .add_system(score_blink_system)
  .run()
}

///|
struct GameState {
  player_entity : @entity.Entity
  mut player_direction : Dir4
  rand : @random.Rand
  mut score : Int
  score_box : @sprite.Text
  mut invincible : Bool
  mut game_timer : Double
  mut game_over : Bool
  timer_box : @sprite.Text
  game_over_box : @sprite.Text
  mut game_over_displayed : Bool
  mut current_wave : Int
  wave_box : @sprite.Text
  mut exp : Int
  exp_box : @sprite.Text
  mut player_level : Int
  level_box : @sprite.Text
  player_stats : PlayerStats
  level_up_panel : LevelUpPanel
  pending_level_ups : Array[Int] // Queue of pending level-ups
  mut score_blink_timer : Double // Timer for blinking effect
  mut score_is_red : Bool // Track current color state
  game_over_panel : GameOverPanel
}

///|
enum Dir4 {
  Up
  Down
  Left
  Right
}

///|
enum LevelUpSelection {
  PowerupSelection(Powerup)
  WeaponSelection(WeaponType)
}

///|
struct PlayerStats {
  mut attack : Double
  mut range : Double
  mut speed : Double
  mut attack_speed : Double
  mut penetration : Int
  weapon_instances : Array[WeaponType] // Can have multiple of same type
}

///|
struct LevelUpPanel {
  panel_entity : @entity.Entity
  mut available_selections : Array[LevelUpSelection]
  // Child entities will be created dynamically with spawn_child
}

///|
struct GameOverPanel {
  panel_entity : @entity.Entity
}

///|
let game_state : GameState = {
  player_entity: @entity.Entity::new(),
  player_direction: Down,
  rand: @random.Rand::new(),
  score: 0,
  score_box: @sprite.Text::new(
    "Score: 0",
    color="white",
    font="24px ThaleahFat",
  ),
  invincible: false,
  game_timer: 600.0,
  game_over: false,
  timer_box: @sprite.Text::new(
    "Time: 10:00",
    color="white",
    font="24px ThaleahFat",
  ),
  game_over_box: @sprite.Text::new(
    "Final Score: 0",
    color="white",
    font="24px ThaleahFat",
  ),
  game_over_displayed: false,
  current_wave: 1,
  wave_box: @sprite.Text::new("Wave: 1", color="orange", font="24px ThaleahFat"),
  exp: 0,
  exp_box: @sprite.Text::new("EXP: 0/16", color="cyan", font="24px ThaleahFat"),
  player_level: 1,
  level_box: @sprite.Text::new(
    "Level: 1",
    color="yellow",
    font="24px ThaleahFat",
  ),
  player_stats: {
    attack: 0.0,
    range: 0.0, // Base range, weapons add to this
    speed: PLAYER_SPEED,
    attack_speed: 1.0,
    penetration: 0,
    weapon_instances: [Pistol], // Start with one Pistol
  },
  level_up_panel: {
    panel_entity: @style.add_widget(
      @style.screen_root,
      h_offset=VIEWPORT_WIDTH / 2.0 - 80,
      v_offset=VIEWPORT_HEIGHT / 2.0 - 120,
      flex=Vertical,
      v_padding=20.0,
      sprite=zindex => @sprite.Sprite::from_color_rect(
        @sprite.ColorRect::new(
          Vec2D(160.0, 250.0),
          "rgba(13, 170, 26, 1)",
          stroke_color="black",
        ),
        zindex,
      ),
    ),
    available_selections: [],
  },
  pending_level_ups: [],
  score_blink_timer: 0.0,
  score_is_red: false,
  game_over_panel: {
    panel_entity: @style.add_widget(
      @style.screen_root,
      h_offset=VIEWPORT_WIDTH / 2.0 - 100,
      v_offset=VIEWPORT_HEIGHT / 2.0 - 60,
      flex=Vertical,
      v_padding=20.0,
      sprite=zindex => @sprite.Sprite::from_color_rect(
        @sprite.ColorRect::new(
          Vec2D(200.0, 120.0),
          "rgba(0, 0, 0, 0.8)",
          stroke_color="white",
        ),
        zindex,
      ),
    ),
  },
}

///|
fn set_score(score : Int) -> Unit {
  game_state.score = score
  game_state.score_box.content = "Score: " + game_state.score.to_string()
}

///|
fn xp_required_for_level(n : Int) -> Int {
  n * (2 * n * n + 21 * n + 73) / 6
}

///|
fn get_level_from_xp(xp : Int) -> Int {
  let mut level = 1
  while xp >= xp_required_for_level(level) {
    level += 1
  }
  level
}

///|
fn add_exp(exp_gained : Int) -> Unit {
  let old_level = game_state.player_level
  game_state.exp += exp_gained

  // Calculate new player level using the XP formula
  let new_level = get_level_from_xp(game_state.exp)
  if new_level > old_level {
    // Queue all levels from new_level down to old_level+1 (reverse order for pop())
    let mut level = new_level
    while level > old_level {
      game_state.pending_level_ups.push(level)
      level -= 1
    }

    // Update player level immediately
    game_state.player_level = new_level
    game_state.level_box.content = "Level: " +
      game_state.player_level.to_string()

    // Process the first level-up in the queue
    process_next_level_up()
  }

  // Update EXP display with progress to next level
  let current_level_xp = if game_state.player_level == 1 {
    0
  } else {
    xp_required_for_level(game_state.player_level - 1)
  }
  let next_level_xp = xp_required_for_level(game_state.player_level)
  let progress_xp = game_state.exp - current_level_xp
  let needed_xp = next_level_xp - current_level_xp
  game_state.exp_box.content = "EXP: " +
    progress_xp.to_string() +
    "/" +
    needed_xp.to_string()
}

///|
fn process_next_level_up() -> Unit {
  if game_state.pending_level_ups.pop() is Some(level) {
    level_up(level)
  }
}

///|
fn add_weapon(weapon_type : WeaponType) -> Unit {
  // Add weapon instance (allows duplicates)
  game_state.player_stats.weapon_instances.push(weapon_type)

  // Apply weapon's speed modifier
  let speed_modifier = get_weapon_speed_modifier(weapon_type)
  game_state.player_stats.speed += speed_modifier

  // Apply weapon's attack speed modifier
  let attack_speed_modifier = get_weapon_attack_speed_modifier(weapon_type)
  game_state.player_stats.attack_speed += attack_speed_modifier
}

///|
fn[T] weighted_random_selection(
  items : Array[T],
  weights : Array[Double],
) -> T? {
  if items.length() == 0 || items.length() != weights.length() {
    return None
  }

  // Calculate total weight
  let mut total_weight = 0.0
  for weight in weights {
    total_weight += weight
  }
  if total_weight <= 0.0 {
    return None
  }

  // Generate random value
  let random_value = game_state.rand.double() * total_weight

  // Select item based on weight
  let mut cumulative = 0.0
  for i in 0..<items.length() {
    cumulative += weights[i]
    if random_value <= cumulative {
      return Some(items[i])
    }
  }

  // Fallback (should not reach here)
  Some(items[items.length() - 1])
}

///|
fn generate_level_up_selections(level : Int) -> Array[LevelUpSelection] {
  // For levels 5, 10, 15, etc., offer 2 powerups + 1 weapon
  if level % 5 == 0 {
    return generate_mixed_selections(level)
  } else {
    return generate_powerup_selections(level)
  }
}

///|
fn generate_mixed_selections(level : Int) -> Array[LevelUpSelection] {
  let selected = []

  // Add 2 weighted random powerups
  for _i in 0..<2 {
    match select_weighted_powerup(level, selected) {
      Some(powerup) => selected.push(PowerupSelection(powerup))
      None => ()
    }
  }

  // Add 1 weighted random weapon
  match select_weighted_weapon(level) {
    Some(weapon) => selected.push(WeaponSelection(weapon))
    None => ()
  }
  selected
}

///|
fn generate_powerup_selections(level : Int) -> Array[LevelUpSelection] {
  let selected = []

  // Add 3 weighted random powerups
  for _i in 0..<3 {
    match select_weighted_powerup(level, selected) {
      Some(powerup) => selected.push(PowerupSelection(powerup))
      None => ()
    }
  }
  selected
}

///|
fn select_weighted_powerup(
  level : Int,
  already_selected : Array[LevelUpSelection],
) -> Powerup? {
  let all_powerup_types = [
    AttackLv1,
    AttackLv2,
    AttackLv3,
    RangeLv1,
    RangeLv2,
    SpeedLv1,
    SpeedLv2,
    CooldownLv1,
    CooldownLv2,
    Bandana,
  ]

  // Filter out already selected powerup types
  let selected_types = []
  for selection in already_selected {
    match selection {
      PowerupSelection(powerup) => selected_types.push(powerup.powerup_type)
      _ => ()
    }
  }
  let available_types = []
  let available_weights = []
  for powerup_type in all_powerup_types {
    // Check if not already selected
    let mut already_has = false
    for selected_type in selected_types {
      if powerup_type == selected_type {
        already_has = true
        break
      }
    }
    if not(already_has) {
      let powerup = create_powerup(powerup_type)
      let weight = (powerup.weight_formula)(level)
      if weight > 0.0 {
        available_types.push(powerup_type)
        available_weights.push(weight)
      }
    }
  }

  // Weighted random selection
  match weighted_random_selection(available_types, available_weights) {
    Some(powerup_type) => Some(create_powerup(powerup_type))
    None => None
  }
}

///|
fn select_weighted_weapon(level : Int) -> WeaponType? {
  let all_weapons = [Pistol, Minigun, SniperRifle, Sword]
  let weights = []
  for weapon_type in all_weapons {
    weights.push(get_weapon_weight(weapon_type, level))
  }
  weighted_random_selection(all_weapons, weights)
}

///|
fn apply_selection(selection : LevelUpSelection) -> Unit {
  match selection {
    PowerupSelection(powerup) => apply_powerup(powerup)
    WeaponSelection(weapon_type) => add_weapon(weapon_type)
  }
}

///|
fn game_start(_delta : Double) -> Unit {
  @backend.load_font("ThaleahFat", "assets/fonts/ThaleahFat.ttf")
  @camera.set_limits(top=0.0, bottom=MAP_HEIGHT, left=0.0, right=MAP_WIDTH)
  add_player()
  add_border(Vec2D(MAP_WIDTH, MAP_HEIGHT))
  add_background(Vec2D(MAP_WIDTH, MAP_HEIGHT))
  add_grass()
  add_score_box()
  add_timer_box()
  add_wave_box()
  add_level_box()
  add_exp_box()
  setup_level_up_ui()
  setup_game_over_ui()
}

///|
///powerup_cooldown_icon
fn game_timer_system(delta : Double) -> Unit {
  if game_state.game_over {
    if not(game_state.game_over_displayed) {
      game_state.game_over_displayed = true
      game_state.game_over_box.content = "Final Score: " +
        game_state.score.to_string()
      add_game_over_box()
    }
    return
  }

  // Continue counting down timer, but don't end game when it reaches 0
  if game_state.game_timer > 0.0 {
    game_state.game_timer -= delta
    if game_state.game_timer < 0.0 {
      game_state.game_timer = 0.0
    }
  }

  // Calculate current wave (1-10) based on remaining time
  let elapsed_time = 600.0 - game_state.game_timer
  let mut new_wave = (elapsed_time / 60.0).to_int() + 1
  if new_wave > 10 {
    new_wave = 10
  }

  // Update wave if changed
  if new_wave != game_state.current_wave {
    game_state.current_wave = new_wave
    game_state.wave_box.content = "Wave: " + game_state.current_wave.to_string()
    reset_wave_state() // Reset spawn counters for new wave
  }

  // Format timer as MM:SS
  let total_seconds = game_state.game_timer.to_int()
  let minutes = total_seconds / 60
  let seconds = total_seconds % 60
  let seconds_str = if seconds < 10 {
    "0" + seconds.to_string()
  } else {
    seconds.to_string()
  }
  game_state.timer_box.content = "Time: " +
    minutes.to_string() +
    ":" +
    seconds_str
}

///|
fn score_blink_system(delta : Double) -> Unit {
  if game_state.score_blink_timer > 0.0 {
    game_state.score_blink_timer -= delta

    // Toggle color every 0.1 seconds (100ms)
    let blink_interval = 0.1
    let elapsed = 1.0 - game_state.score_blink_timer
    let should_be_red = (elapsed / blink_interval).to_int() % 2 == 0
    if should_be_red != game_state.score_is_red {
      game_state.score_is_red = should_be_red
      game_state.score_box.color = if should_be_red { "red" } else { "white" }
    }

    // Reset to white when timer expires
    if game_state.score_blink_timer <= 0.0 {
      game_state.score_blink_timer = 0.0
      game_state.score_is_red = false
      game_state.score_box.color = "white"
    }
  }
}

///|
fn trigger_damage_effect() -> Unit {
  game_state.score_blink_timer = 1.0
  game_state.score_is_red = true
  game_state.score_box.color = "red"
}

///|
fn restart_game() -> Unit {
  // Destroy game over panel
  game_state.game_over_panel.panel_entity.destroy()

  // Reset game state
  game_state.game_over = false
  game_state.game_over_displayed = false
  game_state.game_timer = 600.0
  game_state.current_wave = 1
  game_state.wave_box.content = "Wave: 1"
  set_score(0)
  game_state.exp = 0
  game_state.player_level = 1
  game_state.level_box.content = "Level: 1"
  game_state.exp_box.content = "EXP: 0/16"
  game_state.invincible = false
  game_state.score_blink_timer = 0.0
  game_state.score_is_red = false
  game_state.score_box.color = "white"
  game_state.pending_level_ups.clear()

  // Reset player stats
  game_state.player_stats.attack = 0.0
  game_state.player_stats.range = 0.0
  game_state.player_stats.speed = PLAYER_SPEED
  game_state.player_stats.attack_speed = 1.0
  game_state.player_stats.penetration = 0
  game_state.player_stats.weapon_instances.clear()
  game_state.player_stats.weapon_instances.push(Pistol)

  // Reset weapon timers
  weapon_timers.clear()

  // Clear all enemies
  for e, _state in enemies {
    if e.is_alive() {
      e.destroy()
    }
  }
  enemies.clear()

  // Reset wave state
  reset_wave_state()

  // Reset player position
  @position.positions.set(
    game_state.player_entity,
    @math.Vec2D(MAP_WIDTH / 2.0, MAP_HEIGHT / 2.0),
  )
  @velocity.velocities.set(game_state.player_entity, @math.Vec2D::zero())
}
